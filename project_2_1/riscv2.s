.data

input_a:
    .string "Input A\n"    # Сообщение для ввода значения A
input_x:
    .string "Input X\n"    # Сообщение для ввода значения X
new_line:
    .string "\n"           # Символ новой строки

print_y1:
    .string "Y1 = "        # Метка для вывода значения Y1
print_y2:
    .string ", Y2 = "      # Метка для вывода значения Y2
print_y:
    .string "Y = "         # Метка для вывода итогового значения Y

.text
    .global __start

__start:
    # Вывод сообщения "Input A\n"
    li a7, 4                # Системный вызов для печати строки
    la a0, input_a          # Загружаем адрес строки input_a в a0
    ecall                   # Вызов системного вызова

    # Ввод значения A
    li a7, 5                # Системный вызов для ввода целого числа
    ecall                   # Вызов системного вызова
    
    # Переместить введенное значение A в t1
    mv t1, a0               # Копируем значение из a0 в t1

    # Вывод сообщения "Input X\n"
    li a7, 4                # Системный вызов для печати строки
    la a0, input_x          # Загружаем адрес строки input_x в a0
    ecall                   # Вызов системного вызова

    # Ввод значения X
    li a7, 5                # Системный вызов для ввода целого числа
    ecall                   # Вызов системного вызова
    
    # Переместить введенное значение X в t2
    mv t2, a0               # Копируем значение из a0 в t2

    # Инициализация индекса t0 = 0
    li t0, 0                # Задаем начальное значение индекса как 0

loop:
    # Проверка условия: если X > 4, переход к метке over_4
    li t5, 4                # Устанавливаем t5 = 4
    bge t5, t2, less_or_eq_4 # Если 4 >= X, то переходим к less_or_eq_4
    ble t5, t2, bigger_than_4 # Если 4 < X, то переходим к bigger_than_4

less_or_eq_4:
    # Выполнить Y1 = 4 * X
    mul s1, t5, t2          # s1 = 4 * X
    j continue              # Переход к continue    

bigger_than_4:
    # Выполнить Y1 = X - A
    sub s1, t2, t1          # s1 = X - A

continue:
    # Проверка четности X
    li t6, 2                # Устанавливаем t6 = 2
    rem t4, t2, t6          # t4 = X % 2
    beqz t4, even           # Если t4 == 0, то X четное, переходим к even
    j not_even              # Иначе переходим к not_even

not_even:
    # Если X нечетное, устанавливаем Y2 = 7
    li t6, 7                # Устанавливаем t6 = 7
    mv s2, t6               # Присваиваем s2 = 7
    j result                # Переход к result

even:
    # Если X четное, выполняем Y2 = (X % 2) + A
    li t6, 2                # Устанавливаем t6 = 2
    rem s2, t2, t6          # s2 = X % 2
    add s2, s2, t1          # s2 = s2 + A
    
result:
    # Вывод строки "Y1 = "
    li a7, 4                # Системный вызов для печати строки
    la a0, print_y1         # Загружаем адрес строки print_y1 в a0
    ecall                   # Вызов системного вызова
    
    # Вывод значения Y1 (s1)
    li a7, 1                # Системный вызов для вывода целого числа
    mv a0, s1               # Копируем значение s1 в a0
    ecall                   # Вызов системного вызова
    
    # Вывод строки ", Y2 = "
    li a7, 4                # Системный вызов для печати строки
    la a0, print_y2         # Загружаем адрес строки print_y2 в a0
    ecall                   # Вызов системного вызова
    
    # Вывод значения Y2 (s2)
    li a7, 1                # Системный вызов для вывода целого числа
    mv a0, s2               # Копируем значение s2 в a0
    ecall                   # Вызов системного вызова
    
    # Вывод символа новой строки
    li a7, 4                # Системный вызов для печати строки
    la a0, new_line         # Загружаем адрес строки new_line в a0
    ecall                   # Вызов системного вызова
    
    # Рассчет итогового значения Y = Y1 + Y2
    add s3, s1, s2          # s3 = s1 + s2
    
    # Вывод строки "Y = "
    li a7, 4                # Системный вызов для печати строки
    la a0, print_y          # Загружаем адрес строки print_y в a0
    ecall                   # Вызов системного вызова
    
    # Вывод итогового значения Y (s3)
    li a7, 1                # Системный вызов для вывода целого числа
    mv a0, s3               # Копируем значение s3 в a0
    ecall                   # Вызов системного вызова
    
    # Вывод символа новой строки
    li a7, 4                # Системный вызов для печати строки
    la a0, new_line         # Загружаем адрес строки new_line в a0
    ecall                   # Вызов системного вызова
    
    # Увеличение X на 1
    addi t2, t2, 1          # X = X + 1
    
    # Установить значение t4 равным 9 для условия цикла
    li t4, 9                # t4 = 9
    
    # Увеличение индекса на 1
    addi t0, t0, 1          # t0 = t0 + 1
    
    # Проверка условия завершения цикла (если t0 не равно 9, повторяем цикл)
    bne t0, t4, loop        # Если t0 != 9, переходим к началу цикла

    # Завершение программы
    li a7, 10               # Системный вызов завершения программы
    ecall                   # Вызов системного вызова
